list.of.packages <- c("data.table", "dplyr", "purrr", "tidyr", "readxl", "openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(purrr)
library(tidyr)
library(readxl)
library(openxlsx)
})
user_name <- Sys.getenv("USERNAME")
root_dir <- "C://Users"
dir_folder_name <- "Desktop//ING"
#folder_path <- paste(root_dir, user_name, dir_folder_name, "dane", sep = "//")
folder_path <- "C://Users//MikolajPawlak//Desktop//PIB REAL FAKE//dane"
output_path <- "C://Users//MikolajPawlak//Desktop//PIB REAL FAKE//output"
#output_path <- paste(root_dir, user_name, dir_folder_name, "output", sep = "//")
pliki <- list.files(folder_path, ".xlsx")
sheets <- lapply(pliki, function(f) readxl:: excel_sheets(paste(folder_path,
f,
sep = "//")))
names(sheets) <- pliki
if (length(pliki) > 2) {
print(toupper("W folderze 'dane' znajduja sie niepotrzebne pliki lub brakuje danych do dalszej analizy"))
quit() # konczy sesje, gdy w folderze dane jest wiecej plikow .xlsx niz 2 (ramowka i spoty)
}
View(sheets)
ramowka <- unlist(sheets[!grepl("spot", names(sheets), ignore.case = TRUE)], use.names = FALSE)
spoty <- unlist(sheets[grepl("spot", names(sheets), ignore.case = TRUE)], use.names = FALSE)
lst <-lapply(ramowka, function(f) janitor::clean_names(readxl::read_xlsx(paste(folder_path,
pliki[!grepl("spot", pliki, ignore.case = TRUE)],
sep = "/"),
sheet = f)))
ramowka <- Reduce(dplyr::bind_rows, lst)
list.of.packages <- c("data.table", "dplyr", "purrr", "tidyr", "readxl", "openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(purrr)
library(tidyr)
library(readxl)
library(openxlsx)
})
user_name <- Sys.getenv("USERNAME")
root_dir <- "C://Users"
dir_folder_name <- "Desktop//ING"
#folder_path <- paste(root_dir, user_name, dir_folder_name, "dane", sep = "//")
folder_path <- "C://Users//MikolajPawlak//Desktop//PIB REAL FAKE//dane"
output_path <- "C://Users//MikolajPawlak//Desktop//PIB REAL FAKE//output"
#output_path <- paste(root_dir, user_name, dir_folder_name, "output", sep = "//")
pliki <- list.files(folder_path, ".xlsx")
sheets <- lapply(pliki, function(f) readxl:: excel_sheets(paste(folder_path,
f,
sep = "//")))
names(sheets) <- pliki
if (length(pliki) > 2) {
print(toupper("W folderze 'dane' znajduja sie niepotrzebne pliki lub brakuje danych do dalszej analizy"))
quit() # konczy sesje, gdy w folderze dane jest wiecej plikow .xlsx niz 2 (ramowka i spoty)
}
ramowka <- unlist(sheets[!grepl("spot", names(sheets), ignore.case = TRUE)], use.names = FALSE)
spoty <- unlist(sheets[grepl("spot", names(sheets), ignore.case = TRUE)], use.names = FALSE)
print(toupper("Wczytywanie danych"))
lst <-lapply(ramowka, function(f) janitor::clean_names(readxl::read_xlsx(paste(folder_path,
pliki[!grepl("spot", pliki, ignore.case = TRUE)],
sep = "/"),
sheet = f)))
ramowka <- Reduce(dplyr::bind_rows, lst)
lst_s <- lapply(spoty, function(f) janitor::clean_names(readxl::read_xlsx(paste(folder_path,
pliki[grepl("spot", pliki, ignore.case = TRUE)],
sep = "/"),
sheet = f)))
spoty <- Reduce(dplyr::bind_rows, lst_s)
lista_kanalow <- unique(spoty$channel)
process_data <- function(stacja) {
print(toupper(stacja))
tryCatch(
{channel_df <- ramowka %>%
filter(channel == stacja) %>%
filter(!grepl("blok sponsorski", orig_title, ignore.case = TRUE)) %>%
select(-c(channel, to, ends_with("po_indv"), user_markup, starts_with("trp_"), sub_title)) %>%
mutate(time3 = format(time, "%H:%M:%S"),
date = as.Date(format(date, "%Y-%m-%d")),
new_day = if_else(grepl("^00:|^01",time3, perl = TRUE), TRUE, FALSE),
date = if_else(new_day == TRUE, date + 1, date),
time = as.POSIXct(paste(date, time3), format="%Y-%m-%d %H:%M:%S"),
time_to = time + dur_sec) %>%
select(-c(time3, new_day)) %>%
arrange(date, time) %>%
group_by(time, orig_title) %>%
filter(dur_sec == min(dur_sec)) %>% # w danych za zbiorcze agregaty dla dluzej trwajacych programow i te agregaty chcemy wykluczyc z daleszej analizy
ungroup() %>%
arrange(time) %>%
mutate(czy_break = if_else(grepl("^break", orig_title, ignore.case=TRUE), TRUE, NA),
czy_break2 = if_else(lead(czy_break, 1) == TRUE, TRUE, NA),
czy_break3 = if_else(lag(czy_break, 1) == TRUE, TRUE, NA),
czy_break_final = coalesce(czy_break, czy_break2, czy_break3)) %>%
filter(czy_break_final) %>%
select(-starts_with("czy_break")) %>%
select(-c(date)) %>%
mutate(
real_pierwsze = case_when(grepl("^break", orig_title, ignore.case = TRUE) &
!grepl("^break", lag(orig_title, 1), ignore.case = TRUE) &
lag(dur_sec, 1) > 240 ~ TRUE,
grepl("^break", orig_title, ignore.case = TRUE) &
lag(dur_sec, 1) <= 240 ~ FALSE,
TRUE ~ FALSE),
real_ostatnie = case_when(grepl("^break", orig_title, ignore.case = TRUE) &
!grepl("^break", lead(orig_title, 1), ignore.case = TRUE) &
lead(dur_sec, 1) > 240 ~ TRUE,
grepl("^break", orig_title, ignore.case = TRUE) &
lead(dur_sec, 1) <= 240 ~ FALSE,
TRUE ~ FALSE),
korekta = if_else(grepl("^break", orig_title, ignore.case = TRUE) & lag(orig_title)==lag(orig_title, 2) & lag(time_to,2) == lag(time) & lag(dur_sec,2) > 240, TRUE, FALSE), # czasami w ramowce zbyt dlugi film jest rozbity na 2 rekordy, jeden po drugim czasowo i jak np ten drugi trwa mniej niz 240 sek, to automatycznie break po nim bylby false first, gdyby nie ta korekta
korekta = if_else(is.na(korekta), FALSE, korekta),
real_pierwsze = if_else(real_pierwsze == FALSE & korekta == TRUE, korekta, real_pierwsze)) %>%
select(-korekta)
breaki <- channel_df %>%
filter(grepl("^break", orig_title, ignore.case=TRUE))
spoty_channel <- spoty %>%
filter(channel == stacja) %>%
select(channel, date, time, dur_sec, pib_pos, pib_count, producer, starts_with("trp_all")) %>%
rename_with(~c("grps"), .cols = matches("^trp_all", perl = TRUE)) %>%
mutate(time3 = format(time, "%H:%M:%S"),
date = as.Date(format(date, "%Y-%m-%d")),
new_day = if_else(grepl("^00:|^01",time3, perl = TRUE), TRUE, FALSE),
date = if_else(new_day == TRUE, date + 1, date),
time = as.POSIXct(paste(date, time3), format="%Y-%m-%d %H:%M:%S")) %>%
rename(duration = dur_sec) %>%
distinct() %>%
select(-c(time3, new_day))
setDT(breaki)
setDT(spoty_channel)
setDT(channel_df)
razem <- breaki[spoty_channel, .(x.time,
x.time_to,
dur_sec,
orig_title,
main_title,
real_pierwsze,
real_ostatnie,
channel,
date,
time,
duration,
pib_pos,
pib_count,
producer,
grps),
on = .(time <= time, time_to > time)]
setnames(razem, "time", "time.y")
setnames(razem, "x.time", "time")
setnames(razem, "x.time_to", "time_to")
razem_producers <- merge.data.table(channel_df,
razem,
by = c("time", "time_to", "dur_sec", "orig_title", "main_title", "real_pierwsze", "real_ostatnie"),
all.x= TRUE)
gc()
razem_producers
},
error=function(cond) {
gc()
}
)
}
print(toupper("Procesowanie wczytanych danych"))
output <- lapply(lista_kanalow, process_data)
print(toupper("Agregowanie danych do postaci finalnego raportu"))
final_output <- output %>%
map(~ .x %>%
select(-c(date, channel)) %>%
arrange(time, time.y) %>%
rename(time_from = time) %>%
mutate(
prem_pierwsze = if_else(pib_pos %in% c(1, 2), TRUE, FALSE),
prem_ostatnie = case_when(
pib_count == pib_pos ~ TRUE,
pib_count - 1 == pib_pos ~ TRUE,
TRUE ~ FALSE),
srodkowa = if_else(prem_pierwsze == FALSE & prem_ostatnie == FALSE & !is.na(pib_pos), TRUE, FALSE)) %>%
mutate(real_or_fake = case_when(prem_pierwsze == TRUE & real_pierwsze == TRUE ~ "RealFirst",
prem_pierwsze == TRUE & real_pierwsze == FALSE ~ "FakeFirst",
prem_ostatnie == TRUE & real_ostatnie == TRUE ~ "RealLast",
prem_ostatnie == TRUE & real_ostatnie == FALSE ~ "FakeLast",
srodkowa == TRUE ~ "Middle",
TRUE ~ "Nie dotyczy"))) %>%
bind_rows() %>%
filter(real_or_fake != "Nie dotyczy") %>%
group_by(producer, real_or_fake) %>%
summarise(GRPs = sum(grps)) %>%
ungroup() %>%
pivot_wider(names_from = real_or_fake,
values_from = GRPs,
values_fill = 0) %>%
mutate(Fake = FakeFirst + FakeLast,
Real = RealFirst + RealLast) %>%
select(-c(contains("First"), contains("Last"))) %>%
rowwise() %>%
mutate(total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
mutate(across(where(is.numeric), ~ .x/total)) %>%
select(-total) %>%
mutate(PiB_total = Fake + Real,
Fake_in_PiB_total = Fake/PiB_total,
Real_in_PiB_total = Real/PiB_total)
# tworzenie nowej sciezki, jesli nie istnieje
if (!dir.exists(paste(root_dir, user_name, dir_folder_name, "output", sep = "//"))) {
dir.create(paste(root_dir, user_name, dir_folder_name, "output", sep = "//"))
print(toupper("Nowy folder output utworzony. Poczekaj na wygenerowanie raportu końcowego!!!"))
}
print(toupper("Poczekaj na wygenerowanie raportu końcowego w folderze output!!!"))
openxlsx::write.xlsx(final_output, paste(output_path, sprintf("ING_positioning_%s.xlsx", format(Sys.time(), "%Y-%m-%d_%H_%M")), sep = "//"))
list.of.packages <- c("data.table", "dplyr", "purrr", "tidyr", "readxl", "openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(purrr)
library(tidyr)
library(readxl)
library(openxlsx)
})
user_name <- Sys.getenv("USERNAME")
root_dir <- "C://Users"
dir_folder_name <- "Desktop//ING"
#folder_path <- paste(root_dir, user_name, dir_folder_name, "dane", sep = "//")
folder_path <- "C://Users//MikolajPawlak//Desktop//PIB REAL FAKE//dane"
output_path <- "C://Users//MikolajPawlak//Desktop//PIB REAL FAKE//output"
#output_path <- paste(root_dir, user_name, dir_folder_name, "output", sep = "//")
pliki <- list.files(folder_path, ".xlsx")
sheets <- lapply(pliki, function(f) readxl:: excel_sheets(paste(folder_path,
f,
sep = "//")))
names(sheets) <- pliki
if (length(pliki) > 2) {
print(toupper("W folderze 'dane' znajduja sie niepotrzebne pliki lub brakuje danych do dalszej analizy"))
quit() # konczy sesje, gdy w folderze dane jest wiecej plikow .xlsx niz 2 (ramowka i spoty)
}
ramowka <- unlist(sheets[!grepl("spot", names(sheets), ignore.case = TRUE)], use.names = FALSE)
spoty <- unlist(sheets[grepl("spot", names(sheets), ignore.case = TRUE)], use.names = FALSE)
print(toupper("Wczytywanie danych"))
lst <-lapply(ramowka, function(f) janitor::clean_names(readxl::read_xlsx(paste(folder_path,
pliki[!grepl("spot", pliki, ignore.case = TRUE)],
sep = "/"),
sheet = f)))
ramowka <- Reduce(dplyr::bind_rows, lst)
View(ramowka)
channel_df <- ramowka %>%
filter(channel == stacja) %>%
filter(!grepl("blok sponsorski", orig_title, ignore.case = TRUE)) %>%
select(-c(channel, to, ends_with("po_indv"), user_markup, starts_with("trp_"), sub_title)) %>%
mutate(time3 = format(time, "%H:%M:%S"),
date = as.Date(format(date, "%Y-%m-%d")),
new_day = if_else(grepl("^00:|^01",time3, perl = TRUE), TRUE, FALSE),
date = if_else(new_day == TRUE, date + 1, date),
time = as.POSIXct(paste(date, time3), format="%Y-%m-%d %H:%M:%S"),
time_to = time + dur_sec) %>%
# To decide between fixed or random effects we run a Hausman test
# H0: the preferred model is RE
# H1: the preferred model is FE
phtest(fixed, random)
library(foreign)
require(dplyr)
# setwd("C:/Users/MikolajPawlak/Documents/GitHub/Public-projects/Panel df with R")
df <- read.csv('PanelData.csv')
library(foreign)
require(dplyr)
setwd("C:/Users/MikolajPawlak/Documents/GitHub/Public-projects/Panel df with R")
getwd()
setwd("C:/Users/MikolajPawlak/Documents/GitHub/Public-projects/Panel df with R")
library(foreign)
require(dplyr)
getwd()
setwd("C:/Users/MikolajPawlak/Documents/GitHub/Public-projects/Panel df with R")
getwd()
setwd("C:/Users/MikolajPawlak/Documents/GitHub/Public-projects/Panel df with R")
setwd("C:/Users/MikolajPawlak/Documents/GitHub/Public-projects/Panel data with R")
df <- read.csv('PanelData.csv')
if (is.data.frame(df)) {Panel <- as.data.frame(df)}
names(df)
# Mass comment - Ctrl + Shift + C
head(df)
nrow(df)
ncol(df)
nrow(na.omit(df))
summary(df)
str(df)
# Plot a bar chart for each variable
par(mfrow = c(1, 5))  # Set up a 1x5 grid for 5 variables
for (col in names(df)) {
if (is.numeric(df[[col]])) {
hist(df[[col]], xlab = col, main = col, col = "skyblue", border = "black")
}
}
# we have full panel data - 6 firms in 15 differnt times
# we can also run table(df['I'])
data %>% count(I)
corr <- cor(data)
corr
par(mfrow = c(1, 1))
corrplot::corrplot(
corr,
method = "square",  # Display correlation values
type = "lower",     # Display only the lower triangle of the matrix
addCoef.col = "black",  # Set color for correlation values
tl.col = "black",    # Set color for variable names
diag = FALSE         # Do not display values on the diagonal
)
library(gplots)
plotmeans(C ~ I, main="Heterogeineity across Airlines", data=df)
plotmeans(C ~ T, main="Heterogeineity across years", data=df)
##############################
############### ADD MORE VISUALIZATIONS HERE
##############################
plot(data$Q, data$C, pch=19, xlab="Q", ylab="C")
library(plm)
ols <-lm(C ~ Q+PF+LF, data=df)
summary(ols)
yhat <- ols$fitted
###################################
########## Fixed Effects ##########
###################################
#### 1. Using Least squares dummy variable (LSDV) modelSSS
fixed.dum <-lm(C ~ Q+PF+LF+factor(I)-1, data =df)
summary(fixed.dum)
yhat<- fixed.dum$fitted
yhat
library(car)
Airline<-df$I
scatterplot(yhat~ df$T| Airline, xlab= "I", ylab ="yhat", boxplots = FALSE, smooth = FALSE)
abline(lm(df$C~df$T),lwd=3,col="red")
fixed <- plm(C ~ Q+PF+LF,data =df,model ="within")
summary(fixed)
fixef(fixed) # Display the fixed effects (constants for each country)
pFtest(fixed, ols) # Testing for fixed effects, null: OLS better than fixed
###################################
########## Random Effects #########
###################################
random <- plm(C ~ Q+PF+LF, data=df, index=c("I", "T"), model="random")
summary(random)
# To decide between fixed or random effects we run a Hausman test
# H0: the preferred model is RE
# H1: the preferred model is FE
phtest(fixed, random)
# A test to detect if the variance is not constant and increases as the predictor rises.
# If that's the case we can still depend on unbiased coefficnet but the std. err. cannot be trusted.
lmMod <- lm(C ~ Q+PF+LF+factor(I)+factor(T), data=df)
plot(lmMod)
install.packages("cli", version = "3.6.1", dependencies = TRUE)
detach("package:caret", unload = TRUE)
library(caret)
print(distBCMod)
install.packages("cli", version = "3.6.1", dependencies = TRUE)
install.packages("cli", version = "3.6.1", dependencies = TRUE)
detach("package:caret", unload = TRUE)
library(caret)
install.packages("ipred")
library(cli)
caret
library(caret)
detach("package:cli", unload = TRUE)
distBCMod <- caret::BoxCoxTrans(df$C)
packageVersion("cli")
detach("package:cli", unload = TRUE)
detach("package:cli", unload = TRUE)
